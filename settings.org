#+Title: Emacs Configuration

* overview
** introduction
   This org document contains my emacs configuration.  Each section contains a
code blocks wrappted in **#+begin_src** and **#+end-src** tags.  Using org-babel,
the code blocks are put into a single file, settings.el, and loaded by the
**init.el** file.

When changes are made to this file it is necessary to remove the settings.el
file so that it will be regenerated from this source file.

** resources
[[https://www.emacswiki.org/emacs/SiteMap][Emacs Wiki]]
[[https://gitlab.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/emacs-init.org][Protesilaos Setup]]
* package archives
  Set up package archives.
  org-elpa is mainly here for the ox-reveal package.
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "http://melpa.org/packages/" )
                         ("elpa" . "http://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

* basic configurations
This section contains the basic Emacs settings to turn off menu, toolbars,
scroll bars, turn on line numbers, etc...
** Simple UI
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(display-battery-mode 1)
(setq column-number-mode t)

(setq mode-line-format
              (list
               "%& %b%n"
               " ~ "
               "%m"
               " ~ "
               "%l:%c"))
#+END_SRC

** custom.el
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file))
#+END_SRC

** Improve Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Show Line Numbers
Displaying line numbers interferes with git gutter (and others)
So only show line numbers in prog-mode
#+BEGIN_SRC emacs-lisp
;;(global-linum-mode 1)
(add-hook 'prog-mode-hook
        'display-line-numbers-mode)
#+END_SRC

** Yes-no-prompt
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Other basic settings
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)

;; keep in sync with external changes to file
(global-auto-revert-mode 1)

(global-visual-line-mode 1)
#+END_SRC
** Fill column
#+BEGIN_SRC emacs-lisp
(setq fci-rule-column 80)
#+END_SRC

** Scrolling more naturally
#+BEGIN_SRC emacs-lisp
(pixel-scroll-mode)
#+END_SRC

** Compilation window output
#+BEGIN_SRC emacs-lisp
(setq compilation-window-height 15)
#+END_SRC

** Truncate lines by in code
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode
          (lambda ()
            (setq-default truncate-lines t)))
#+END_SRC

* delight
#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t
  :after use-package)
#+END_SRC
* font
Set font to use in all buffers.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Iosevka"
                    :height 140
                    :weight 'normal
                    :width 'normal)
(copy-face 'default 'fixed-pitch)
(set-frame-font "Iosevka" nil t)
#+END_SRC

* editing
** indentation
#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 2)
(setq tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC
** history
#+BEGIN_SRC emacs-lisp
;; remember where our cursor was at last close
(savehist-mode 1)
#+END_SRC
** backup / autosave
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** parenthesis handling
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(show-paren-mode 1)

(use-package paredit
:ensure t
:config
(paredit-mode 1))
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
(setq require-final-newline t)
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode 1))

(use-package general
  :after which-key
  :ensure t
  :config
  (general-override-mode 1))

#+END_SRC
* ido
Interactive DO.
Find file interactively
#+BEGIN_SRC emacs-lisp
(use-package ido
:disabled
:ensure t
:config
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)
(setq ido-file-extension-order '("*.org" ".txt" ".csv")))
#+END_SRC

* ido describe binding
  This package must be manually installed from melpa.

* ido grid mode
#+BEGIN_SRC emacs-lisp
(use-package ido-grid-mode
:disabled
:ensure t
:config
(ido-grid-mode 1))
#+END_SRC

* windows
** window
#+begin_src emacs-lisp
(use-package window
  :init
  ;; TODO do not repeat common parts, abstract them somehow
  (setq display-buffer-alist
        '(;; top side window
          ("\\*\\(Flycheck\\|Package-Lint\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.15)
           (side . top)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          ;; bottom side window
          ("\\*e?shell.*"
           (display-buffer-in-side-window)
           (window-height . 0.25)
           (side . bottom)
           (slot . 0))
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.25)
           (side . bottom)
           (slot . 1))
          ;; right side window
          ("\\*Faces\\*"
           (display-buffer-in-side-window)
           (window-width . 0.333)
           (side . right)
           (slot . 0)
           (window-parameters . ((no-other-window . t)
                                 (mode-line-format . (" "
                                                      mode-line-buffer-identification)))))
          ("\\*Custom.*"
           (display-buffer-in-side-window)
           (window-width . 0.333)
           (side . right)
           (slot . 1))))
  :bind (("s-n" . next-buffer)
         ("s-p" . previous-buffer)
         ("s-o" . other-window)
         ("s-2" . split-window-below)
         ("s-3" . split-window-right)
         ("s-0" . delete-window)
         ("s-1" . delete-other-windows)
         ("s-5" . delete-frame)
         ("<f8>" . window-toggle-side-windows)))

;; These are all experimental.  Just showcasing the power of passing
;; parameters to windows or frames.
(use-package emacs
  :config
  (defun prot/window-dired-vc-root-left ()
    "Open root directory of current version-controlled repository
or the present working directory with `dired' and bespoke window
parameters.  This is meant as a proof-of-concept function,
illustrating how to leverage window rules to display a buffer,
plus a few concomitant extras."
    (interactive)
    (let ((dir (if (eq (vc-root-dir) nil)
                   (dired-noselect default-directory)
                 (dired-noselect (vc-root-dir)))))
      (display-buffer-in-side-window
       dir `((side . left)
             (slot . 0)
             (window-width . 0.16)
             (window-parameters . ((no-other-window . t)
                                   (no-delete-other-windows . t)
                                   (mode-line-format . (" "
                                                        mode-line-buffer-identification))))))
      (with-current-buffer dir
        (rename-buffer "*Dired-Side*")
        (setq-local window-size-fixed 'width)))
    (with-eval-after-load 'ace-window
      (when (boundp 'aw-ignored-buffers)
        (add-to-list 'aw-ignored-buffers "*Dired-Side*"))))

  (defun prot/make-frame-floating-with-current-buffer ()
    "Display the current buffer in a new floating frame.

This passes certain parameters to the newly created frame:

- use a different name than the default;
- use a graphical frame;
- do not display the minibuffer.

The name is meant to be used by the external rules of my tiling
window manager (BSPWM) to present the frame in a floating state."
    (interactive)
    (make-frame '((name . "my_float_window")
                  (window-system . x)
                  (minibuffer . nil))))

  (defun prot/display-buffer-at-bottom ()
    "Move the current buffer to the bottom of the frame.  This is
useful to take a buffer out of a side window.

The window parameters of this function are provided mostly for
didactic purposes."
    (interactive)
    (let ((buffer (current-buffer)))
      (with-current-buffer buffer
        (delete-window)
        (display-buffer-at-bottom
         buffer `((window-parameters . ((mode-line-format . (" "
                                                             mode-line-buffer-identification)))))))))
  :bind (("C-c d" . prot/window-dired-vc-root-left)
         ("C-c f" . prot/make-frame-floating-with-current-buffer)
         ("C-c b" . prot/display-buffer-at-bottom)))
#+end_src

** winner mode
'''Ctrl-c''' then right/left arrow key
#+BEGIN_SRC emacs-lisp
(use-package winner
  :hook (after-init . winner-mode)
  :bind (("<s-right>" . winner-redo)
         ("<s-left>" . winner-undo)))
#+END_SRC

** ace-windows
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?h ?j ?k ?l ?y ?u ?i ?o ?p))
  (setq aw-scope 'frame)
  (setq aw-dispatch-always t)
  (setq aw-dispatch-alist
        '((?s aw-swap-window "Swap Windows")
          (?2 aw-split-window-vert "Split Window Vertically")
          (?3 aw-split-window-horz "Split Window Horizontally")
          (?? aw-show-dispatch-help)))
  (setq aw-minibuffer-flag t)
  (setq aw-ignore-current nil)
  (setq aw-display-mode-overlay t)
  (setq aw-background t)

  (ace-window-display-mode -1))
  ;;:bind (("s-a" . ace-window)))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :pin org)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))

(use-package org-noter
  :ensure t)
#+END_SRC

* org-mode customizations
#+BEGIN_SRC emacs-lisp

;; for use with EVIL mode
;; (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)

;; difficulty getting reveal to work
(setq org-enable-reveal-js-support t)

;; Org
(setq-default
   org-tags-column -60
   org-clock-into-drawer "LOGBOOK"
   org-log-into-drawer "LOGBOOK"
   org-startup-align-all-tables t
   org-footnote-auto-adjust t
   org-footnote-auto-label 'confirm
   org-N-RET-may-split-line
   '((headline . nil) (item . nil) (table . nil))
   org-directory "/media/Data/Documents/org"
   org-default-notes-file "/media/Data/Documents/org/capture.org"
   org-agenda-files (directory-files-recursively "/media/Data/Documents/org/" "\.org$")
   ;; org-startup-indented t
   org-pretty-entities t
   ;; show actually italicized text instead of /italicized text/
   org-hide-emphasis-markers t
   org-agenda-block-separator ""
   org-fontify-whole-heading-line t
   org-fontify-done-headline t
   org-fontify-quote-and-verse-blocks t
   ;; keeping the following for reference
   ;; Ignore scheduled tasks in task list view (SPC m t)
   ;; org-agenda-todo-ignore-scheduled t
   ;; org-agenda-todo-ignore-deadlines t
   ;; Skip finished items
   ;; org-agenda-skip-deadline-if-done t
   ;; org-agenda-skip-scheduled-if-done t
)

(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)

;; display images
(setq org-startup-with-inline-images t)
(add-hook
 'org-babel-after-execute-hook
 (lambda ()
   (when org-inline-image-overlays
     (org-redisplay-inline-images))))


(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-hide-emphasis-markers t
      org-edit-src-content-indentation 0)

;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (js .t)
   (plantuml . t)
   (python . t)
   (sqlite . t)
   ))

(add-to-list 'org-src-lang-modes
             '("html" . web))

;; publish 'web' src as is
(defun org-babel-execute:web (body params)
  body)

(setenv "GRAPHVIZ_DOT" "D:/dev/3rdparty/graphviz/2.38/bin/dot.exe")
(setq org-plantuml-jar-path
      (expand-file-name "D:/dev/3rdparty/plantuml/plantuml.jar"))

(setq org-link-abbrev-alist
      '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
        ("google"    . "http://www.google.com/search?q=")
        ("gmap"      . "http://maps.google.com/maps?q=%s")
        ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
        ("ads"       . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")
        ("ORGDIR"    . "D:/Documents/org/")))

;; example of setting env var named “path”, by appending a new path to existing path
(setenv "PATH"
        (concat
         "C:/Program Files (x86)/Java/jre1.8.0_161/bin" ";"
         "D:/dev/3rdparty/graphviz/2.38/bin" ";"
         (getenv "PATH")
         )
)

(setq org-capture-templates
      '(("a" "Appointment" entry (file+headline  "D:/Documents/org/2019.org" "Projects")
         "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
        ("n" "Note" entry (file+headline "D:/Documents/org/2019.org" "Notes")
         "* Note %?\n%T")
        ("l" "Link" entry (file+headline "D:/Documents/org/2019.org" "Links")
         "* %? %^L %^g \n%T" :prepend t)
        ("b" "Blog idea" entry (file+headline "D:/Documents/org/2019.org" "Blog Ideas")
         "* %?\n%T" :prepend t)
        ("t" "To Do Item" entry (file+headline "D:/Documents/org/2019.org" "To Do Items")
         "* %?\n%T" :prepend t)
        ("j" "Journal" entry (file+datetree "D:/Documents/org/2019.org" "Journal")
         "* %?\nEntered on %U\n  %i\n  %a")
         "* %?\n%i\n"))

#+END_SRC

* PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
 :disabled
 :ensure t
 :pin manual ;; manually update
 :config
 ;; initialise
 (pdf-tools-install)
 ;; open pdfs scaled to fit page
 (setq-default pdf-view-display-size 'fit-page)
 ;; automatically annotate highlights
 (setq pdf-annot-activate-created-annotations t)
 ;; use normal isearch
 (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
 ;; turn off cua so copy works
 (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
 ;; more fine-grained zooming
 (setq pdf-view-resize-factor 1.1)
 ;; keyboard shortcuts
 (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
 (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
 (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_SRC

* ivy + counsel + swiper
** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :delight
  :config
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-height-alist '((t lambda (_caller) (/ (window-height) 4))))
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap nil)
  (setq ivy-re-builders-alist
        '((counsel-M-x . ivy--regex-fuzzy)
          (ivy-switch-buffer . ivy--regex-fuzzy)
          (ivy-switch-buffer-other-window . ivy--regex-fuzzy)
          (counsel-rg . ivy--regex-or-literal)
          (t . ivy--regex-plus)))
  (setq ivy-display-style 'fancy)
  (setq ivy-use-selectable-prompt t)
  (setq ivy-fixed-height-minibuffer nil)
  (setq ivy-initial-inputs-alist
        '((counsel-M-x . "^")
          (ivy-switch-buffer . "^")
          (ivy-switch-buffer-other-window . "^")
          (counsel-describe-function . "^")
          (counsel-describe-variable . "^")
          (t . "")))

  (ivy-set-occur 'counsel-fzf 'counsel-fzf-occur)
  (ivy-set-occur 'counsel-rg 'counsel-ag-occur)
  (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
  (ivy-set-occur 'swiper 'swiper-occur)
  (ivy-set-occur 'swiper-isearch 'swiper-occur)
  (ivy-set-occur 'swiper-multi 'counsel-ag-occur)
  :hook ((after-init . ivy-mode)
         (ivy-occur-mode . hl-line-mode))
  :bind (("<s-up>" . ivy-push-view)
         ("<s-down>" . ivy-switch-view)
         ("C-S-r" . ivy-resume)
         :map ivy-occur-mode-map
         ("f" . forward-char)
         ("b" . backward-char)
         ("n" . ivy-occur-next-line)
         ("p" . ivy-occur-previous-line)
         ("<C-return>" . ivy-occur-press)))
#+END_SRC

** prescient
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :ensure t
  :config
  (setq prescient-history-length 200)
  (setq prescient-save-file "~/.emacs.d/prescient-items")
  (setq prescient-filter-method '(literal regexp))
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :ensure t
  :after (prescient ivy)
  :config
  (setq ivy-prescient-sort-commands
        '(:not counsel-grep
               counsel-rg
               counsel-switch-buffer
               ivy-switch-buffer
               swiper
               swiper-multi))
  (setq ivy-prescient-retain-classic-highlighting t)
  (setq ivy-prescient-enable-filtering nil)
  (setq ivy-prescient-enable-sorting t)
  (ivy-prescient-mode 1))
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config
  (setq counsel-yank-pop-preselect-last t)
  (setq counsel-yank-pop-separator "\n—————————\n")
  (setq counsel-rg-base-command
        "rg -SHn --no-heading --color never --no-follow --hidden %s")
  (setq counsel-find-file-occur-cmd; TODO Simplify this
        "ls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 ls -d --group-directories-first")

  (defun prot/counsel-fzf-rg-files (&optional input dir)
    "Run `fzf' in tandem with `ripgrep' to find files in the
present directory.  If invoked from inside a version-controlled
repository, then the corresponding root is used instead."
    (interactive)
    (let* ((process-environment
            (cons (concat "FZF_DEFAULT_COMMAND=rg -Sn --color never --files --no-follow --hidden")
                  process-environment))
           (vc (vc-root-dir)))
      (if dir
          (counsel-fzf input dir)
        (if (eq vc nil)
            (counsel-fzf input default-directory)
          (counsel-fzf input vc)))))

  (defun prot/counsel-fzf-dir (arg)
    "Specify root directory for `counsel-fzf'."
    (prot/counsel-fzf-rg-files ivy-text
                               (read-directory-name
                                (concat (car (split-string counsel-fzf-cmd))
                                        " in directory: "))))

  (defun prot/counsel-rg-dir (arg)
    "Specify root directory for `counsel-rg'."
    (let ((current-prefix-arg '(4)))
      (counsel-rg ivy-text nil "")))

  ;; TODO generalise for all relevant file/buffer counsel-*?
  (defun prot/counsel-fzf-ace-window (arg)
    "Use `ace-window' on `prot/counsel-fzf-rg-files' candidate."
    (ace-window t)
    (let ((default-directory (if (eq (vc-root-dir) nil)
                                 counsel--fzf-dir
                               (vc-root-dir))))
      (if (> (length (aw-window-list)) 1)
          (find-file arg)
        (find-file-other-window arg))
      (balance-windows (current-buffer))))

  ;; Pass functions as appropriate Ivy actions (accessed via M-o)
  (ivy-add-actions
   'counsel-fzf
   '(("r" prot/counsel-fzf-dir "change root directory")
     ("g" prot/counsel-rg-dir "use ripgrep in root directory")
     ("a" prot/counsel-fzf-ace-window "ace-window switch")))

  (ivy-add-actions
   'counsel-rg
   '(("r" prot/counsel-rg-dir "change root directory")
     ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))

  (ivy-add-actions
   'counsel-find-file
   '(("g" prot/counsel-rg-dir "use ripgrep in root directory")
     ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))

  ;; Remove commands that only work with key bindings
  (put 'counsel-find-symbol 'no-counsel-M-x t)
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("s-f" . counsel-find-file)
         ("s-F" . find-file-other-window)
         ("C-x b" . ivy-switch-buffer)
         ("s-b" . ivy-switch-buffer)
         ("C-x B" . counsel-switch-buffer-other-window)
         ("s-B" . counsel-switch-buffer-other-window)
         ("C-x d" . counsel-dired)
         ("s-d" . counsel-dired)
         ("s-D" . dired-other-window)
         ("C-x C-r" . counsel-recentf)
         ("s-r" . counsel-recentf)
         ("s-y" . counsel-yank-pop)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("M-s r" . counsel-rg)
         ("M-s g" . counsel-git-grep)
         ("M-s l" . counsel-find-library)
         ("M-s z" . prot/counsel-fzf-rg-files)
         :map ivy-minibuffer-map
         ("C-r" . counsel-minibuffer-history)
         ("s-y" . ivy-next-line)        ; Avoid 2× `counsel-yank-pop'
         ("C-SPC" . ivy-restrict-to-matches)))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  ;; :delight '(:eval (concat " " (projectile-project-name)))
  :delight
  :config
  (setq projectile-project-search-path '("~/Git/Projects/"))
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'ivy))

(use-package counsel-projectile
  :ensure t
  :config
  (add-to-list 'ivy-initial-inputs-alist '(counsel-projectile-switch-project . ""))
  :hook (after-init . counsel-projectile-mode)
  ;; :bind-keymap ("M-s p" . projectile-command-map)
  :bind (("M-s b" . counsel-projectile-switch-to-buffer)
         ("M-s d" . counsel-projectile-find-dir)
         ("M-s p" . (lambda ()
                      (interactive)
                      (counsel-projectile-switch-project 4)))))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy
  :config
  (setq swiper-action-recenter t)
  (setq swiper-goto-start-of-match t)
  (setq swiper-include-line-number-in-search t)
  :bind (("C-S-s" . swiper)
         ("M-s s" . swiper-multi)
         ("M-s w" . swiper-thing-at-point)))
#+END_SRC
** Ivy extensions
*** Ivy rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :ensure t
  :config
  (setq ivy-rich-path-style 'abbreviate)

  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  :hook (after-init . ivy-rich-mode))
#+END_SRC
*** Ivy posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
  :ensure t
  :delight
  :config
  (setq ivy-posframe-parameters
        '((left-fringe . 2)
          (right-fringe . 2)
          (internal-border-width . 2)
          (font . "Iosevka-11:hintstyle=hintfull")))
  (setq ivy-posframe-height-alist
        '((swiper . 15)
          (swiper-isearch . 15)
          (t . 10)))
  (setq ivy-posframe-display-functions-alist
        '((complete-symbol . ivy-posframe-display-at-point)
          (swiper . nil)
          (swiper-isearch . nil)
          (t . ivy-posframe-display-at-frame-center)))
  :hook (after-init . ivy-posframe-mode))
#+END_SRC
* magit
   Install magit from melpa.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)))

(use-package git-gutter
  :ensure t
  :init
  (global-git-gutter-mode +1))
#+END_SRC

* iedit
   https://www.emacswiki.org/emacs/Iedit
   Use '''Ctrl-;''' over a variable then all edits
   to that variable will change all instances of the variable. Can limit to an
   area by highlighting area then narrowing. Then use '''Ctrl-;''' to change a
   variable. Only instances in this narrowed area will be changed.
#+BEGIN_SRC emacs-lisp
(use-package iedit :ensure t)
#+END_SRC

* company
   https://www.emacswiki.org/emacs/CompanyMode
#+BEGIN_SRC emacs-lisp
(use-package company
  :disabled
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (global-company-mode t)
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0))
#+END_SRC

* company-quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
:ensure t
:config
(company-quickhelp-mode 1)
(setq company-quickhelp-delay 0))
#+END_SRC

* anaconda-mode
   This is a dependency for company-anaconda, so will be installed by
   company-anaconda
#+BEGIN_SRC emacs-lisp
;;(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

* company-anaconda
#+BEGIN_SRC emacs-lisp
(use-package rx
:disabled
:ensure t)
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
;; specify folder containing personal snippets.
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(use-package yasnippet
:ensure t
:config
(yas-global-mode 1))
;;
;; follow prevents interference with company mode
;; see 'Yasnippet integration' section of
;; https://www.emacswiki.org/emacs/CompanyMode
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))
 (defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))
 (defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
 (global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC

* yasnippet-snippets
Collection of yasnippet snippets.

* highlight-indent-guides
Install package from melpa.
https://github.com/DarthFennec/highlight-indent-guides
Highlights indentation levels.
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
:ensure t
:config
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
)
#+END_SRC

* ox-reveal
   Must add [[org-elpa]] before package can be installed.
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:disabled
:ensure t
:pin org
)
;;(setq org-reveal-root "file:///D:/dev/3rdparty/revealjs")
#+END_SRC

* evil
Configuration from: https://github.com/bradwright/emacs.d/blob/master/setup-evil.el
#+BEGIN_SRC emacs-lisp

(use-package undo-tree :ensure t)
(use-package goto-chg :ensure t)

(use-package evil
:ensure t
:config
(evil-mode 1)
)

;;(setq
;;   ;; this stops evil from overwriting the cursor color
;;   evil-default-cursor t
;;   ;; h/l wrap around to next lines
;;   evil-cross-lines t
;;   evil-default-state 'normal
;;   ;; include first/last character when moving to e/bol
;;   evil-want-visual-char-semi-exclusive t
;;   ;; don't move the cursor around like Vim
;;   evil-move-cursor-back nil
;;   )
;;
;;  ;; use ido to open files
;;  (define-key evil-ex-map "e " 'ido-find-file)
;;  (define-key evil-ex-map "b " 'ido-switch-buffer)
;;
;;  ;; make end-of-line work in insert
;;  (define-key evil-insert-state-map "\C-e" 'end-of-line)
;;;;;;;
;;  ;; Make C-g work like <esc>
;;  (define-key evil-normal-state-map "\C-g" 'evil-normal-state)
;;  (define-key evil-visual-state-map "\C-g" 'evil-normal-state)
;;  (define-key evil-insert-state-map "\C-g" 'evil-normal-state)
;;
;;  (define-key evil-normal-state-map [escape] 'keyboard-quit)
;;  (define-key evil-visual-state-map [escape] 'keyboard-quit)
;;  (define-key minibuffer-local-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-ns-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-completion-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-must-match-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-isearch-map [escape] 'abort-recursive-edit)
;;
#+END_SRC

* elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "/media/Data/Documents/kb/org/elfeed.org")))

(use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory "//media/Data/Documents/org/elfeeddb/"))
#+END_SRC
* Themes
See '''M-x customize-themes''' for examples
Can find others in melpa and load from there.
** current theme
#+BEGIN_SRC emacs-lisp
(use-package modus-operandi-theme
  :ensure t
  :config
  (setq custom-safe-themes t)
  (setq modus-operandi-theme-slanted-constructs t
        modus-operandi-theme-bold-constructs t
        modus-operandi-theme-proportional-fonts nil
        modus-operandi-theme-scale-headings t
        modus-operandi-theme-scale-1 1.1
        modus-operandi-theme-scale-2 1.2
        modus-operandi-theme-scale-3 1.3
        modus-operandi-theme-scale-4 1.4)
  (load-theme 'modus-operandi t))

(use-package modus-vivendi-theme
  :disabled
  :ensure t
  :config
  (setq modus-vivendi-theme-slanted-constructs t
        modus-vivendi-theme-bold-constructs t
        modus-vivendi-theme-proportional-fonts nil
        modus-vivendi-theme-scale-headings t
        modus-vivendi-theme-scale-1 1.1
        modus-vivendi-theme-scale-2 1.2
        modus-vivendi-theme-scale-3 1.3
        modus-vivendi-theme-scale-4 1.4)
  (load-theme 'modus-vivendi t))

;;(use-package emacs
;;  :ensure t
;;  :config
;;  (defun prot/modus-themes-toggle ()
;;    "Simplistic toggle for my Modus Themes.  All it does is check
;;if `modus-operandi' (light version) is active and if so switch to
;;`modus-vivendi' (dark version).  Else it switches to the light
;;theme."
;;    (interactive)
;;    (if (eq (car custom-enabled-themes) 'modus-operandi)
;;        (prot/modus-vivendi)
;;      (prot/modus-operandi)))
;;  :bind ("<f5>" . prot/modus-themes-toggle)
;;  :hook (after-init . prot/modus-operandi))
(defun modus-themes-toggle ()
  "Simplistic toggle for my Modus Themes.  All it does is check
if `modus-operandi' (light version) is active and if so switch to
`modus-vivendi' (dark version).  Else it switches to the light
theme."
  (interactive)
  (if (eq (car custom-enabled-themes) 'modus-operandi)
      (load-theme 'modus-vivendi t)
    (load-theme 'modus-operandi t)))
#+END_SRC

* Language Specific
** Web Mode
#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)

(setq web-mode-style-padding 2)
(setq web-mode-script-padding 2)

(setq web-mode-auto-quote-style 2) ; use single quotes
#+END_SRC

* GDB
Show me all the windows
#+BEGIN_SRC emacs-lisp
(setq gdb-many-windows 't)
#+END_SRC

* custom functions
#+BEGIN_SRC emacs-lisp
(defun find-user-init-file ()
  "Edit the `user-init-file', in same window."
  (interactive)
  (find-file user-init-file))

(defun load-user-init-file ()
  "Load the `user-init-file', in same window."
  (interactive)
  (load-file user-init-file))

 ;;Taken from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+END_SRC
* Key Bindings
#+BEGIN_SRC emacs-lisp

;;(global-set-key (kbd "C-?") 'hippie-expand)
;;(global-set-key (kbd "M-D") 'backward-kill-word)
;;(global-set-key (kbd "DEL") 'backward-delete-char)
;;(global-set-key (kbd "C-z") 'replace-string)
;;;;(global-set-key (kbd "C-M-z") 'replace regex)
;;(global-set-key (kbd "C-Z") 'count-matches)


(general-create-definer tyrant-def
  :states '(normal visual insert motion emacs)
  :prefix "SPC"
  :non-normal-prefix "C-SPC")
(general-create-definer despot-def
  :states '(normal insert)
  :prefix "SPC"
  :non-normal-prefix "C-SPC")
(general-define-key
  :keymaps 'key-translation-map
  "ESC" (kbd "C-g"))
(general-def
  "C-x x" 'eval-defun)
(tyrant-def
  "TAB" 'previous-buffer
  "SPC"    (general-simulate-key "C-x")
  "c"   (general-simulate-key "C-c")
  "h"   (general-simulate-key "C-h")
  "u"   (general-simulate-key "C-u")
  "x"   (general-simulate-key "C-x")
   ;; Package manager
  "lp"  'list-packages
   ;; Theme operations
  "t"   '(:ignore t :which-key "themes")
  "tn"  'my/cycle-theme
  "tt"  'load-theme
  "tl"  'load-leuven-theme
  "td"  'load-dichromacy-theme
  "tg"  'load-gruvbox-theme
  "tmo" 'load-modus-operandi-theme
  "tmv" 'load-modus-vivendi-theme
   ;; Quit operations
  "q"   '(:ignore t :which-key "quit emacs")
  "qq"  'kill-emacs
  "qz"  'delete-frame
   ;; Buffer operations
  "b"   '(:ignore t :which-key "buffer")
  "bb"  'mode-line-other-buffer
  "bd"  'kill-this-buffer
  "b]"  'next-buffer
  "b["  'previous-buffer
  "bq"  'kill-buffer-and-window
  "bR"  'rename-file-and-buffer
  "br"  'revert-buffer
   ;; Window operations
  "w"   '(:ignore t :which-key "window")
  "wm"  'maximize-window
  "w/"  'split-window-horizontally
  "wv"  'split-window-vertically
  "wm"  'maximize-window
  "wu"  'winner-undo
  "ww"  'other-window
  "wd"  'delete-window
  "wD"  'delete-other-windows
   ;; File operations
  "f"   '(:ignore t :which-key "files")
  "fc"  'write-file
  "fe"  '(:ignore t :which-key "emacs")
  "fed" 'find-user-init-file
  "feR" 'load-user-init-file
  "fj"  'dired-jump
  "fl"  'find-file-literally
  "fR"  'rename-file-and-buffer
  "fs"  'save-buffer
   ;; Applications
  "a"   '(:ignore t :which-key "Applications")
  "ad"  'dired
  "ae"  'elfeed
  ":"   'shell-command
  ";"   'eval-expression
  "ac"  'calendar
  "o"   '(:ignore t :which-key "Org-mode")
  "oa"  'org-agenda
  "oc"  '(:ignore t :which-key "Clock")
  "oci" 'org-clock-in
  "oco" 'org-clock-out)

(general-def 'normal doc-view-mode-map
  "j"   'doc-view-next-line-or-next-page
  "k"   'doc-view-previous-line-or-previous-page
  "gg"  'doc-view-first-page
  "G"   'doc-view-last-page
  "C-d" 'doc-view-scroll-up-or-next-page
  "C-f" 'doc-view-scroll-up-or-next-page
  "C-b" 'doc-view-scroll-down-or-previous-page)
(general-def '(normal visual) outline-minor-mode-map
  "zn"  'outline-next-visible-heading
  "zp"  'outline-previous-visible-heading
  "zf"  'outline-forward-same-level
  "zB"  'outline-backward-same-level)
(general-def 'normal package-menu-mode-map
  "i"   'package-menu-mark-install
  "U"   'package-menu-mark-upgrades
  "d"   'package-menu-mark-delete
  "u"   'package-menu-mark-unmark
  "x"   'package-menu-execute
  "q"   'quit-window)
(general-def 'normal calendar-mode-map
  "h"   'calendar-backward-day
  "j"   'calendar-forward-week
  "k"   'calendar-backward-week
  "l"   'calendar-forward-day
  "0"   'calendar-beginning-of-week
  "^"   'calendar-beginning-of-week
  "$"   'calendar-end-of-week
  "["   'calendar-backward-year
  "]"   'calendar-forward-year
  "("   'calendar-beginning-of-month
  ")"   'calendar-end-of-month
  "SPC" 'scroll-other-window
  "S-SPC" 'scroll-other-window-down
  "<delete>" 'scroll-other-window-down
  "<"   'calendar-scroll-right
  ">"   'calendar-scroll-left
  "C-b" 'calendar-scroll-right-three-months
  "C-f" 'calendar-scroll-left-three-months
  "{"   'calendar-backward-month
  "}"   'calendar-forward-month
  "C-k" 'calendar-backward-month
  "C-j" 'calendar-forward-month
  "gk"  'calendar-backward-month
  "gj"  'calendar-forward-month
  "v"   'calendar-set-mark
  "."   'calendar-goto-today
  "q"   'calendar-exit)
#+END_SRC

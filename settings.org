#+Title: Emacs Configuration

* Packages
** melpa
#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/" ) t)
(package-initialize)

#+END_SRC

** org-elpa
This is mainly here for the ox-reveal package.
#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

#+END_SRC


* Basic Emacs settings
This section contains the basic Emacs settings to turn off menu, toolbars,
scroll bars, turn on line numbers, etc...
** code
#+BEGIN_SRC emacs-lisp

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq inhibit-splash-screen t)
(setq make-backup-files nil)
(global-linum-mode 1)

(fset 'yes-or-no-p 'y-or-n-p)
(display-time-mode 1)
(display-battery-mode 1)
(setq column-number-mode t)

(global-hl-line-mode 1)
(electric-pair-mode 1)
(show-paren-mode 1)

;; remember where our cursor was at last close
(savehist-mode 1)

(global-auto-revert-mode 1)
(global-visual-line-mode 1)

#+END_SRC


* ido
** Description
Interactive DO.
Find file interactively
*** code
#+BEGIN_SRC emacs-lisp

(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)
(setq ido-file-extension-order '("*.org" ".txt" ".csv"))

#+END_SRC

** winner mode
'''Ctrl-c''' then right/left arrow key
*** code
#+BEGIN_SRC emacs-lisp

(winner-mode 1)

#+END_SRC


* Installed Packages
** ido describe binding
   This package bust be manually installed from melpa.
** ido grid mode
   This package bust be manually installed from melpa.
   The following code will make sure grid mode is used everywhere.
*** code
#+BEGIN_SRC emacs-lisp

(ido-grid-mode 1)

#+END_SRC

** cycle themes
*** code
#+BEGIN_SRC emacs-lisp

(setq cycle-themes-theme-list
'(alect-themes atom-one-dark zenburn))
(require 'cycle-themes)
(cycle-themes-mode 1)

#+END_SRC

** org-bullets
*** code
#+BEGIN_SRC emacs-lisp

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))

#+END_SRC

** ivy + swiper + counsel
   Install counsel package from melpa which will install swiper and ivy as
   dependencies.
*** code
#+BEGIN_SRC emacs-lisp
;; from https://github.com/abo-abo/swiper
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; I added counsel-yank-pop binding
(global-set-key (kbd "C-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

** magit
   Install magit from melpa.
*** code
#+BEGIN_SRC emacs-lisp

(require 'magit)

#+END_SRC

** iedit
   https://www.emacswiki.org/emacs/Iedit
   Install package from melpa. Use '''Ctrl-;''' over a variable then all edits
   to that variable will change all instances of the variable. Can limit to an
   area by highlighting area then narrowing. Then use '''Ctrl-;''' to change a
   variable. Only instances in this narrowed area will be changed.
*** code
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC

** paredit
*** code
#+BEGIN_SRC emacs-lisp
(require 'paredit)
(paredit-mode 1)
#+END_SRC

** company
   Install package from melpa
   https://www.emacswiki.org/emacs/CompanyMode
*** code
#+BEGIN_SRC emacs-lisp

(add-hook 'after-init-hook 'global-company-mode)
(global-company-mode t)
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0)
#+END_SRC

** company-quickhelp
   Install package from melpa.
*** code
#+BEGIN_SRC emacs-lisp
(company-quickhelp-mode 1)
(setq company-quickhelp-delay 0)
#+END_SRC

** anaconda-mode
   This is a dependency for company-anaconda, so will be installed by
   company-anaconda
*** code
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

** company-anaconda
*** code
#+BEGIN_SRC emacs-lisp
(require 'rx)
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC

** yasnippet
   Install package from melpa.
*** code
#+BEGIN_SRC emacs-lisp
;; specify folder containing personal snippets. 
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

;; follow prevents interference with company mode
;; see 'Yasnippet integration' section of
;; https://www.emacswiki.org/emacs/CompanyMode
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))
 (defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))
 (defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
 (global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC

** yasnippet-snippets
 Collection of yasnippet snippets.

** highlight-indent-guides
   Install package from melpa.
   https://github.com/DarthFennec/highlight-indent-guides
   Highlights indentation levels.
*** code
#+BEGIN_SRC emacs-lisp
(require 'highlight-indent-guides)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
;; (setq highlight-indent-guides-character ?\|)
#+END_SRC

** ox-reveal
*** code
#+BEGIN_SRC emacs-lisp
(require 'ox-reveal)
(setq org-reveal-root "file:///C:/Users/jeffe/dev/3rdparty/revealjs")
#+END_SRC

** evil


* Themes
See '''M-x customize-themes''' for examples
Can find others in melpa and load from there:
 - cycle-themes
   - see config in Installed Packages [[cycle themes]] section
** current theme
#+BEGIN_SRC emacs-lisp

;;(load-theme 'zenburn t)
;;(load-theme 'alect-light)
(load-theme 'alect-dark)
;;(load-theme 'alect-black)
;;(load-theme 'atom-one-dark)

#+END_SRC


* Key Bindings
** code
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-?") 'hippie-expand)
(global-set-key (kbd "M-D") 'backward-kill-word)
(global-set-key (kbd "DEL") 'backward-delete-char)
(global-set-key (kbd "C-z") 'replace-string)
;;(global-set-key (kbd "C-M-z") 'replace regex)
(global-set-key (kbd "C-Z") 'count-matches)

#+END_SRC


* org-mode customizations
** code
#+BEGIN_SRC emacs-lisp

;; Org
(setq-default
   org-tags-column -80
   org-clock-into-drawer "LOGBOOK"
   org-log-into-drawer "LOGBOOK"
   org-startup-align-all-tables t
   org-footnote-auto-adjust t
   org-footnote-auto-label 'confirm
   org-N-RET-may-split-line
   '((headline . nil) (item . nil) (table . nil))
   org-directory "C:/Users/jeffe/Documents/org"
   org-default-notes-file "C:/Users/jeffe/Documents/org/capture.org"
   org-agenda-files '("C:/Users/jeffe/dev/docs")
)

(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)

(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)

;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (js .t)
   (plantuml . t)
   (python . t)
   (sqlite . t)
   ))

(setenv "GRAPHVIZ_DOT" "C:/Users/jeffe/dev/3rdparty/graphviz/2.38/bin/dot.exe")
(setq org-plantuml-jar-path
      (expand-file-name "C:/Users/jeffe/dev/3rdparty/plantuml/plantuml.jar"))

(setq org-link-abbrev-alist
      '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
        ("google"    . "http://www.google.com/search?q=")
        ("gmap"      . "http://maps.google.com/maps?q=%s")
        ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
        ("ads"       . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")
        ("ORGDIR"    . "C:/Users/jeffe/dev/orgfiles/")))

;; example of setting env var named “path”, by appending a new path to existing path
(setenv "PATH"
        (concat
         "C:/Program Files (x86)/Java/jre1.8.0_161/bin" ";"
         "C:/Users/jeffe/dev/3rdparty/graphviz/2.38/bin" ";"
         (getenv "PATH")
         )
)
#+END_SRC

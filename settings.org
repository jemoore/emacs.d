#+Title: Emacs Configuration

* Packages
  Set up package archives.
  org-elpa is mainly here for the ox-reveal package.
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "http://melpa.org/packages/" )
                         ("elpa" . "http://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC


* Basic Configurations
This section contains the basic Emacs settings to turn off menu, toolbars,
scroll bars, turn on line numbers, etc...

** Simple UI
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(display-battery-mode 1)
(setq column-number-mode t)

(setq mode-line-format
              (list
               "%& %b%n"
               " ~ "
               "%m"
               " ~ "
               "%l:%c"))
#+END_SRC

** Improve Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Show Line Numbers
Displaying line numbers interferes with git gutter (and others)
So only show line numbers in prog-mode
#+BEGIN_SRC emacs-lisp
;;(global-linum-mode 1)
(add-hook 'prog-mode-hook
	'display-line-numbers-mode)
#+END_SRC

** Yes-no-prompt
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Other basic settings
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)

;; keep in sync with external changes to file
(global-auto-revert-mode 1)

(global-visual-line-mode 1)
#+END_SRC
** Fill column
#+BEGIN_SRC emacs-lisp
(setq fci-rule-column 80)
#+END_SRC

** Scrolling more naturally
#+BEGIN_SRC emacs-lisp
(pixel-scroll-mode)
#+END_SRC

** Compilation window output
#+BEGIN_SRC emacs-lisp
(setq compilation-window-height 15)
#+END_SRC

** Truncate lines by in code
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode
          (lambda ()
            (setq-default truncate-lines t)))
#+END_SRC


* Font
Set font to use in all buffers.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default t :font "Source Code Pro-14" )
(set-frame-font "Source Code Pro-14" nil t)
#+END_SRC


* Editing
** Indentation
#+BEGIN_SRC emacs_lisp
(setq c-basic-offset 2)
(setq tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC
** History
#+BEGIN_SRC emacs_lisp
;; remember where our cursor was at last close
(savehist-mode 1)
#+END_SRC
** Backup / Autosave
#+BEGIN_SRC emacs_lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Parenthesis handling
#+BEGIN_SRC emacs_lisp
(electric-pair-mode 1)
(show-paren-mode 1)
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs_lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
(setq require-final-newline t)
#+END_SRC


* ido
Interactive DO.
Find file interactively
#+BEGIN_SRC emacs-lisp
(use-package ido
:ensure t
:config
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)
(setq ido-file-extension-order '("*.org" ".txt" ".csv")))
#+END_SRC


* ido describe binding
  This package must be manually installed from melpa.


* ido grid mode
#+BEGIN_SRC emacs-lisp
(use-package ido-grid-mode
:ensure t
:config
(ido-grid-mode 1))
#+END_SRC


* winner mode
'''Ctrl-c''' then right/left arrow key
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC


* cycle themes
#+BEGIN_SRC emacs-lisp
(setq cycle-themes-theme-list
'(spacemacs-dark atom-one-dark alect-themes zenburn))
(use-package cycle-themes
:ensure t
:config
(cycle-themes-mode 1))
#+END_SRC


* org
#+BEGIN_SRC emacs-lisp
  (use-package org
  :ensure t
  :pin org)

  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+END_SRC


* org-mode customizations
#+BEGIN_SRC emacs-lisp

;; for use with EVIL mode
;;(evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)

;; difficulty getting reveal to work
(setq org-enable-reveal-js-support t)

;; Org
(setq-default
   org-tags-column -60
   org-clock-into-drawer "LOGBOOK"
   org-log-into-drawer "LOGBOOK"
   org-startup-align-all-tables t
   org-footnote-auto-adjust t
   org-footnote-auto-label 'confirm
   org-N-RET-may-split-line
   '((headline . nil) (item . nil) (table . nil))
   org-directory "D:/Documents/org"
   org-default-notes-file "D:/Documents/org/capture.org"
   org-agenda-files '("D:/Documents/org")
)

(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)

;; display images
(setq org-startup-with-inline-images t)
(add-hook
 'org-babel-after-execute-hook
 (lambda ()
   (when org-inline-image-overlays
     (org-redisplay-inline-images))))


(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-hide-emphasis-markers t
      org-edit-src-content-indentation 0)

;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (js .t)
   (plantuml . t)
   (python . t)
   (sqlite . t)
   ))

(add-to-list 'org-src-lang-modes
             '("html" . web))

;; publish 'web' src as is
(defun org-babel-execute:web (body params)
  body)

(setenv "GRAPHVIZ_DOT" "D:/dev/3rdparty/graphviz/2.38/bin/dot.exe")
(setq org-plantuml-jar-path
      (expand-file-name "D:/dev/3rdparty/plantuml/plantuml.jar"))

(setq org-link-abbrev-alist
      '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
	("google"    . "http://www.google.com/search?q=")
	("gmap"      . "http://maps.google.com/maps?q=%s")
	("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
	("ads"       . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")
	("ORGDIR"    . "D:/Documents/org/")))

;; example of setting env var named “path”, by appending a new path to existing path
(setenv "PATH"
	(concat
	 "C:/Program Files (x86)/Java/jre1.8.0_161/bin" ";"
	 "D:/dev/3rdparty/graphviz/2.38/bin" ";"
	 (getenv "PATH")
	 )
)

(setq org-capture-templates
      '(("a" "Appointment" entry (file+headline  "D:/Documents/org/2019.org" "Projects")
	 "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	("n" "Note" entry (file+headline "D:/Documents/org/2019.org" "Notes")
	 "* Note %?\n%T")
	("l" "Link" entry (file+headline "D:/Documents/org/2019.org" "Links")
	 "* %? %^L %^g \n%T" :prepend t)
	("b" "Blog idea" entry (file+headline "D:/Documents/org/2019.org" "Blog Ideas")
	 "* %?\n%T" :prepend t)
	("t" "To Do Item" entry (file+headline "D:/Documents/org/2019.org" "To Do Items")
	 "* %?\n%T" :prepend t)
	("j" "Journal" entry (file+datetree "D:/Documents/org/2019.org" "Journal")
	 "* %?\nEntered on %U\n  %i\n  %a")
	 "* %?\n%i\n"))

#+END_SRC


* PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
   :ensure t
   :pin manual ;; manually update
   :config
   ;; initialise
   (pdf-tools-install)
   ;; open pdfs scaled to fit page
   (setq-default pdf-view-display-size 'fit-page)
   ;; automatically annotate highlights
   (setq pdf-annot-activate-created-annotations t)
   ;; use normal isearch
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
   ;; turn off cua so copy works
   (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
   ;; more fine-grained zooming
   (setq pdf-view-resize-factor 1.1)
   ;; keyboard shortcuts
   (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
   (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
   (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_SRC


* ivy + swiper + counsel
   Install counsel package from melpa which will install swiper and ivy as
   dependencies.
#+BEGIN_SRC emacs-lisp
;; from https://github.com/abo-abo/swiper
(use-package counsel :ensure t)

(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
;;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; I added counsel-yank-pop binding
(global-set-key (kbd "C-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC


* magit
   Install magit from melpa.
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))

(use-package git-gutter
:ensure t
:init
(global-git-gutter-mode +1))
#+END_SRC


* iedit
   https://www.emacswiki.org/emacs/Iedit
   Use '''Ctrl-;''' over a variable then all edits
   to that variable will change all instances of the variable. Can limit to an
   area by highlighting area then narrowing. Then use '''Ctrl-;''' to change a
   variable. Only instances in this narrowed area will be changed.
#+BEGIN_SRC emacs-lisp
(use-package iedit :ensure t)
#+END_SRC


* paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
:ensure t
:config
(paredit-mode 1))
#+END_SRC


* company
   https://www.emacswiki.org/emacs/CompanyMode
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(add-hook 'after-init-hook 'global-company-mode)
(global-company-mode t)
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0))
#+END_SRC

* company-quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
:ensure t
:config
(company-quickhelp-mode 1)
(setq company-quickhelp-delay 0))
#+END_SRC

* anaconda-mode
   This is a dependency for company-anaconda, so will be installed by
   company-anaconda
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

* company-anaconda
#+BEGIN_SRC emacs-lisp
(use-package rx
:ensure t)
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC


* yasnippet
#+BEGIN_SRC emacs-lisp
;; specify folder containing personal snippets. 
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(use-package yasnippet
:ensure t
:config
(yas-global-mode 1))
;;
;; follow prevents interference with company mode
;; see 'Yasnippet integration' section of
;; https://www.emacswiki.org/emacs/CompanyMode
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))
 (defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))
 (defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
 (global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC

* yasnippet-snippets
Collection of yasnippet snippets.


* highlight-indent-guides
   Install package from melpa.
   https://github.com/DarthFennec/highlight-indent-guides
   Highlights indentation levels.
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
:ensure t
:config
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
;; (setq highlight-indent-guides-character ?\|)
)
#+END_SRC


* ox-reveal
   Must add [[org-elpa]] before package can be installed.
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure t
:pin org
)
(setq org-reveal-root "file:///D:/dev/3rdparty/revealjs")
#+END_SRC


* evil
Configuration from: https://github.com/bradwright/emacs.d/blob/master/setup-evil.el
#+BEGIN_SRC emacs-lisp 

(use-package undo-tree :ensure t)
(use-package goto-chg :ensure t)

(use-package evil
:ensure t
:config
(evil-mode 1)
)

(setq
   ;; this stops evil from overwriting the cursor color
   evil-default-cursor t
   ;; h/l wrap around to next lines
   evil-cross-lines t
   evil-default-state 'normal
   ;; include first/last character when moving to e/bol
   evil-want-visual-char-semi-exclusive t
   ;; don't move the cursor around like Vim
   evil-move-cursor-back nil
   )

  ;; use ido to open files
  (define-key evil-ex-map "e " 'ido-find-file)
  (define-key evil-ex-map "b " 'ido-switch-buffer)

  ;; make end-of-line work in insert
  (define-key evil-insert-state-map "\C-e" 'end-of-line)

;;  ;; Make C-g work like <esc>
;;  (define-key evil-normal-state-map "\C-g" 'evil-normal-state)
;;  (define-key evil-visual-state-map "\C-g" 'evil-normal-state)
;;  (define-key evil-insert-state-map "\C-g" 'evil-normal-state)
;;
;;  (define-key evil-normal-state-map [escape] 'keyboard-quit)
;;  (define-key evil-visual-state-map [escape] 'keyboard-quit)
;;  (define-key minibuffer-local-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-ns-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-completion-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-must-match-map [escape] 'abort-recursive-edit)
;;  (define-key minibuffer-local-isearch-map [escape] 'abort-recursive-edit)
;;
#+END_SRC


* Themes
See '''M-x customize-themes''' for examples
Can find others in melpa and load from there:
 - cycle-themes
   - see config in Installed Packages [[cycle themes]] section
** current theme
Improve theme loading; [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][from reddit]]
#+BEGIN_SRC emacs-lisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
;;(load-theme 'zenburn t)
;;(load-theme 'alect-light)
;;(load-theme 'alect-dark)
;;(load-theme 'alect-black)
;;(use-package atom-one-dark-theme
;;:ensure t
;;:config
;;(load-theme 'atom-one-dark))
(use-package spacemacs-theme
:ensure t
:config
(load-theme 'spacemacs-dark-theme))

#+END_SRC


* Language Specific
** Web Mode
#+BEGIN_SRC emacs-lisp 
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)

(setq web-mode-style-padding 2)
(setq web-mode-script-padding 2)

(setq web-mode-auto-quote-style 2) ; use single quotes
#+END_SRC

* GDB
Show me all the windows
#+BEGIN_SRC emacs-lisp 
(setq gdb-many-windows 't)
#+END_SRC

* Key Bindings
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-?") 'hippie-expand)
(global-set-key (kbd "M-D") 'backward-kill-word)
(global-set-key (kbd "DEL") 'backward-delete-char)
(global-set-key (kbd "C-z") 'replace-string)
;;(global-set-key (kbd "C-M-z") 'replace regex)
(global-set-key (kbd "C-Z") 'count-matches)

#+END_SRC


